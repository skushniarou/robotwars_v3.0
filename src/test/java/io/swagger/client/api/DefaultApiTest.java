/*
 * Robot Wars API
 * Eine Api f√ºr das Spiel Robot Wars
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Game;
import io.swagger.client.model.JoinGame;
import io.swagger.client.model.JoinGameResponse;
import io.swagger.client.model.Move;
import io.swagger.client.model.NewGame;
import io.swagger.client.model.NewMove;
import io.swagger.client.model.NewRobot;
import io.swagger.client.model.Robot;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Bestimmtes Spiel
     *
     * Liefert ein Spiel mit der ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiGamesGameIdGetTest() throws Exception {
        String id = null;
        Game response = api.apiGamesGameIdGet(id);

        // TODO: test validations
    }
    /**
     * Spiel beitreten
     *
     * Einen bestehenden Spiel beitreten
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiGamesGameIdJoinPostTest() throws Exception {
        JoinGame body = null;
        String id = null;
        JoinGameResponse response = api.apiGamesGameIdJoinPost(body, id);

        // TODO: test validations
    }
    /**
     * Alle Bewegungen
     *
     * Liefert eine Liste aller Bewegungen im einem bestimmten Spiel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiGamesGameIdMoveGetTest() throws Exception {
        String id = null;
        List<Move> response = api.apiGamesGameIdMoveGet(id);

        // TODO: test validations
    }
    /**
     * Alle Bewegungen
     *
     * Liefert eine Liste aller Bewegungen nach der Bewegung die in der MoveID beschreiben ist, im einem bestimmten Spiel.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiGamesGameIdMoveMoveIdAfterGetTest() throws Exception {
        String id = null;
        String moveId = null;
        List<Move> response = api.apiGamesGameIdMoveMoveIdAfterGet(id, moveId);

        // TODO: test validations
    }
    /**
     * Einen Zug machen
     *
     * Macht einen zug.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiGamesGameIdMovePlayerPlayerIdPostTest() throws Exception {
        NewMove body = null;
        String id = null;
        String playerId = null;
        Move response = api.apiGamesGameIdMovePlayerPlayerIdPost(body, id, playerId);

        // TODO: test validations
    }
    /**
     * Einen neues Spiel erstellen
     *
     * Erstellt ein neues Spielt.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiGamesGamePostTest() throws Exception {
        NewGame body = null;
        Game response = api.apiGamesGamePost(body);

        // TODO: test validations
    }
    /**
     * Karten
     *
     * Liefert alle vorhandenen Karten
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiMapsGetTest() throws Exception {
        List<java.util.Map> response = api.apiMapsGet();

        // TODO: test validations
    }
    /**
     * Liste von Robotern
     *
     * Liefert eine liste von allen Robotern
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiRobotsGetTest() throws Exception {
        List<Robot> response = api.apiRobotsGet();

        // TODO: test validations
    }
    /**
     * Bestimmter Roboter
     *
     * Liefert einen Roboter mit der ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiRobotsRobotIdGetTest() throws Exception {
        String id = null;
        List<Robot> response = api.apiRobotsRobotIdGet(id);

        // TODO: test validations
    }
    /**
     * Einen neuen Roboter erstellen
     *
     * Erstellt einen neuen Roboter mit den bereitgestellten Daten.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void apiRobotsRobotPostTest() throws Exception {
        NewRobot body = null;
        Robot response = api.apiRobotsRobotPost(body);

        // TODO: test validations
    }
}
